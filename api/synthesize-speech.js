// API —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ ElevenLabs
export default async function handler(req, res) {
  // –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { text } = req.body;

    if (!text) {
      return res.status(400).json({ error: 'Text is required' });
    }

    // API –∫–ª—é—á ElevenLabs (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    const elevenLabsApiKey = process.env.ELEVENLABS_API_KEY;
    
    if (!elevenLabsApiKey) {
      console.error('‚ùå ELEVENLABS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return res.status(500).json({ error: 'API key not configured' });
    }

    // ID –≥–æ–ª–æ—Å–∞ (Bella - –∫—Ä–∞—Å–∏–≤—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å)
    const voiceId = 'EXAVITQu4vr4xnSDxMaL'; // Bella voice

    console.log('üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ ElevenLabs:', text.substring(0, 50) + '...');
    console.log('üîë API Key:', elevenLabsApiKey.substring(0, 10) + '...');
    console.log('üé§ Voice ID:', voiceId);

    // –ó–∞–ø—Ä–æ—Å –∫ ElevenLabs API
    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
      method: 'POST',
      headers: {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': elevenLabsApiKey
      },
      body: JSON.stringify({
        text: text,
        model_id: 'eleven_multilingual_v2',
        voice_settings: {
          stability: 0.5,
          similarity_boost: 0.5,
          style: 0.0,
          use_speaker_boost: true
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ ElevenLabs API:', response.status, errorText);
      return res.status(response.status).json({ 
        error: 'ElevenLabs API error', 
        details: errorText 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    const audioBuffer = await response.arrayBuffer();
    const audioBase64 = Buffer.from(audioBuffer).toString('base64');

    console.log('‚úÖ ElevenLabs –∞—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');

    return res.status(200).json({
      success: true,
      audio: audioBase64,
      format: 'mp3'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    });
  }
}
