import React, { useState, useRef, useEffect } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Progress } from "@/components/ui/progress";
import { 
  Video, 
  VideoOff, 
  Mic, 
  MicOff, 
  Phone, 
  PhoneCall, 
  Camera, 
  CameraOff,
  Play,
  Pause,
  Square,
  Download,
  Share,
  MessageCircle,
  Heart,
  Activity,
  Thermometer,
  Eye,
  Ear,
  PawPrint,
  Clock,
  Users,
  Star,
  CheckCircle,
  AlertCircle,
  Zap,
  Shield,
  Wifi,
  WifiOff,
  Send,
  Paperclip,
  Smile,
  X,
  RotateCcw,
  FlipHorizontal,
  Check
} from 'lucide-react';
import { toast } from "sonner";
import SymptomAnalyzer from "@/components/SymptomAnalyzer";
import { doctors as importedDoctors, type Doctor as ImportedDoctor } from "@/data/doctors";

interface VideoCallState {
  isConnected: boolean;
  isVideoOn: boolean;
  isAudioOn: boolean;
  isRecording: boolean;
  callDuration: number;
  connectionQuality: 'excellent' | 'good' | 'poor' | 'disconnected';
  isConnecting: boolean;
  isFrontCamera: boolean;
}

interface Doctor {
  id: string;
  name: string;
  specialty: string;
  avatar: string;
  rating: number;
  isOnline: boolean;
  experience: string;
}

interface SymptomAnalysis {
  detected: string[];
  confidence: number;
  recommendations: string[];
  urgency: 'low' | 'medium' | 'high';
}

const Telemedicine = () => {
  const [callState, setCallState] = useState<VideoCallState>({
    isConnected: false,
    isVideoOn: true,
    isAudioOn: true,
    isRecording: false,
    callDuration: 0,
    connectionQuality: 'excellent',
    isConnecting: false,
    isFrontCamera: true
  });

  const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null);
  const [isCalling, setIsCalling] = useState(false);
  const [symptomAnalysis, setSymptomAnalysis] = useState<SymptomAnalysis | null>(null);
  const [showSymptomDemo, setShowSymptomDemo] = useState(false);
  const [showSymptomAnalyzer, setShowSymptomAnalyzer] = useState(false);
  const [currentView, setCurrentView] = useState<'doctors' | 'call' | 'analysis'>('doctors');
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [currentDoctor, setCurrentDoctor] = useState<Doctor | null>(null);
  const [chatMessages, setChatMessages] = useState<any[]>([
    {
      id: 1,
      text: "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?",
      sender: 'doctor',
      timestamp: new Date(Date.now() - 300000), // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
      status: 'read'
    },
    {
      id: 2,
      text: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –£ –º–æ–µ–≥–æ –∫–æ—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏ –ø—Ä–æ–ø–∞–ª –∞–ø–ø–µ—Ç–∏—Ç, —Å—Ç–∞–ª –≤—è–ª—ã–º",
      sender: 'user',
      timestamp: new Date(Date.now() - 240000), // 4 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
      status: 'read'
    },
    {
      id: 3,
      text: "–ü–æ–Ω–∏–º–∞—é. –ê –∫–∞–∫ –¥–∞–≤–Ω–æ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è? –ï—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–ø—Ç–æ–º—ã?",
      sender: 'doctor',
      timestamp: new Date(Date.now() - 180000), // 3 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
      status: 'read'
    },
    {
      id: 4,
      text: "–£–∂–µ —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å. –ï—â–µ –æ–Ω –º–Ω–æ–≥–æ –ø—å–µ—Ç –≤–æ–¥—ã, –Ω–æ –ø–æ—á—Ç–∏ –Ω–µ –µ—Å—Ç",
      sender: 'user',
      timestamp: new Date(Date.now() - 120000), // 2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
      status: 'delivered'
    }
  ]);
  const [newMessage, setNewMessage] = useState('');
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showFilePicker, setShowFilePicker] = useState(false);

  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const recordingRef = useRef<MediaRecorder | null>(null);
  const callTimerRef = useRef<NodeJS.Timeout | null>(null);

  const doctors: Doctor[] = [
    {
      id: '1',
      name: '–í–æ–ª–∫–æ–≤–∞ –ì–∞–ª–∏–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞',
      specialty: '–ì–ª–∞–≤–Ω—ã–π –≤—Ä–∞—á, —Ç—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥–∏—è, –≤–∏–∑—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, —ç–Ω–¥–æ—Å–∫–æ–ø–∏—è',
      avatar: '/Img team/1.jpg',
      rating: 4.9,
      isOnline: true,
      experience: '15 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    },
    {
      id: '2', 
      name: '–®–∫–∏–ª—å –°–≤–µ—Ç–ª–∞–Ω–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞',
      specialty: '–ì–ª–∞–≤–Ω—ã–π –≤—Ä–∞—á, –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è',
      avatar: '/Img team/2.jpg',
      rating: 4.8,
      isOnline: true,
      experience: '12 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    },
    {
      id: '3',
      name: '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞',
      specialty: '–ì–ª–∞–≤–Ω—ã–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π –≤—Ä–∞—á, –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥–∏—è, —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è',
      avatar: '/Img team/3.jpg',
      rating: 4.9,
      isOnline: true,
      experience: '10 –ª–µ—Ç –æ–ø—ã—Ç–∞'
    }
  ];

  // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ —á–µ—Ä–µ–∑ AI
  const analyzeSymptoms = async () => {
    setSymptomAnalysis({
      detected: ['–í—è–ª–æ—Å—Ç—å', '–ü–æ—Ç–µ—Ä—è –∞–ø–ø–µ—Ç–∏—Ç–∞', '–£—á–∞—â–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ'],
      confidence: 87,
      recommendations: [
        '–ò–∑–º–µ—Ä—å—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É',
        '–û–±–µ—Å–ø–µ—á—å—Ç–µ –ø–æ–∫–æ–π',
        '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã'
      ],
      urgency: 'medium'
    });
    
    toast.success('–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!', {
      description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 3 –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞'
    });
  };

  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–º–µ—Ä—ã (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
  const checkCameraSupport = async () => {
    console.log('üì∑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –¥–µ–º–æ —Ä–µ–∂–∏–º');
    return true;
  };

  // –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
  const startVideoCall = async (doctor: Doctor) => {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ —Å –≤—Ä–∞—á–æ–º:', doctor.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–º–µ—Ä—ã
    const cameraSupported = await checkCameraSupport();
    if (!cameraSupported) {
      return;
    }
    
    setIsCalling(true);
    setSelectedDoctor(doctor);
    setCurrentView('call');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }
    
    // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    setCallState(prev => ({ 
      ...prev, 
      isConnecting: true,
      isVideoOn: false,
      isAudioOn: false 
    }));
    
    toast.success('–ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞...', {
      description: '–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ'
    });
    
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      console.log('üìπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º...');
      
      const constraints = {
        video: {
          width: { ideal: 1280, min: 640 },
          height: { ideal: 720, min: 480 },
          facingMode: 'user',
          frameRate: { ideal: 30, min: 15 }
        },
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        }
      };
      
      console.log('üìã –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:', constraints);
      
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      
      console.log('‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –ø–æ—Ç–æ–∫:', stream);
      console.log('üìπ –í–∏–¥–µ–æ —Ç—Ä–µ–∫–∏:', stream.getVideoTracks());
      console.log('üé§ –ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏:', stream.getAudioTracks());
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏
      const videoTracks = stream.getVideoTracks();
      if (videoTracks.length === 0) {
        throw new Error('–ù–µ—Ç –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–æ–≤');
      }
      
      console.log('üìπ –í–∏–¥–µ–æ —Ç—Ä–µ–∫ –∞–∫—Ç–∏–≤–µ–Ω:', videoTracks[0].enabled);
      console.log('üìπ –í–∏–¥–µ–æ —Ç—Ä–µ–∫ –≥–æ—Ç–æ–≤:', videoTracks[0].readyState);
      console.log('üìπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ:', videoTracks[0].getSettings());
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–æ–∫
      streamRef.current = stream;
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—É
      if (videoRef.current) {
        console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—É');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π srcObject
        videoRef.current.srcObject = null;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
        videoRef.current.srcObject = stream;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
        videoRef.current.muted = true;
        videoRef.current.playsInline = true;
        videoRef.current.autoplay = true;
        videoRef.current.controls = false;
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        await new Promise((resolve, reject) => {
          if (videoRef.current) {
            videoRef.current.onloadedmetadata = resolve;
            videoRef.current.onerror = reject;
            
            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(() => {
              if (videoRef.current?.readyState >= 1) {
                resolve(null);
              } else {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ'));
              }
            }, 5000);
          }
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        try {
          await videoRef.current.play();
          console.log('‚ñ∂Ô∏è –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setCallState(prev => ({ 
            ...prev, 
            isVideoOn: true,
            isAudioOn: true
          }));
          
          toast.success('–ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞!', {
            description: '–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω'
          });
          
          // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Ä–∞—á–∞
          setTimeout(() => {
            console.log('üë®‚Äç‚öïÔ∏è –í—Ä–∞—á –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');
            setCallState(prev => ({ 
              ...prev, 
              isConnected: true,
              isConnecting: false,
              isVideoOn: true,
              isAudioOn: true
            }));
            
            startCallTimer();
            
            toast.success('–í—Ä–∞—á –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!', {
              description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å'
            });
          }, 2000);
          
        } catch (playError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:', playError);
          
          // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
          setTimeout(async () => {
            try {
              if (videoRef.current && videoRef.current.srcObject) {
                await videoRef.current.play();
                console.log('‚ñ∂Ô∏è –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π');
                
                setCallState(prev => ({ 
                  ...prev, 
                  isVideoOn: true,
                  isAudioOn: true
                }));
              }
            } catch (retryError) {
              console.error('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è:', retryError);
              toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ', {
                description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É'
              });
            }
          }, 1000);
        }
      } else {
        console.error('‚ùå –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        throw new Error('–í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∞:', error);
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ';
      let errorDescription = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É';
      
      if (error.name === 'NotAllowedError') {
        errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω';
        errorDescription = '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É';
      } else if (error.name === 'NotFoundError') {
        errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
        errorDescription = '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–º–µ—Ä—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É';
      } else if (error.name === 'NotReadableError') {
        errorMessage = '–ö–∞–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
        errorDescription = '–ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É';
      } else if (error.name === 'OverconstrainedError') {
        errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
        errorDescription = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞–º–µ—Ä—É –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã';
      } else if (error.name === 'SecurityError') {
        errorMessage = '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
        errorDescription = '–¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ';
      }
      
      toast.error(errorMessage, {
        description: errorDescription
      });
      
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–∞–º–µ—Ä—ã
      setCallState(prev => ({ 
        ...prev, 
        isConnected: true,
        isConnecting: false,
        isVideoOn: false,
        isAudioOn: false
      }));
      
      startCallTimer();
    }
    
    setIsCalling(false);
  };

  // –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
  const startRecording = () => {
    if (!streamRef.current) return;
    
    try {
      const mediaRecorder = new MediaRecorder(streamRef.current, {
        mimeType: 'video/webm;codecs=vp9'
      });
      
      recordingRef.current = mediaRecorder;
      
      const chunks: BlobPart[] = [];
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: 'video/webm' });
        const url = URL.createObjectURL(blob);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        const a = document.createElement('a');
        a.href = url;
        a.download = `telemedicine-${new Date().toISOString().split('T')[0]}.webm`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        toast.success('–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', {
          description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–∫–∞—á–∞–Ω–∞ –≤ –ø–∞–ø–∫—É –ó–∞–≥—Ä—É–∑–∫–∏'
        });
      };
      
      mediaRecorder.start();
      setCallState(prev => ({ ...prev, isRecording: true }));
      
      toast.success('–ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞', {
        description: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è'
      });
      
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏', {
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å'
      });
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
  const stopRecording = () => {
    if (recordingRef.current && recordingRef.current.state === 'recording') {
      recordingRef.current.stop();
      setCallState(prev => ({ ...prev, isRecording: false }));
    }
  };

  // –¢–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
  const startCallTimer = () => {
    callTimerRef.current = setInterval(() => {
      setCallState(prev => ({
        ...prev,
        callDuration: prev.callDuration + 1
      }));
    }, 1000);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const endCall = () => {
    console.log('üìû –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
    if (recordingRef.current && callState.isRecording) {
      console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å...');
      stopRecording();
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (callTimerRef.current) {
      clearInterval(callTimerRef.current);
      callTimerRef.current = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫
    if (streamRef.current) {
      console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫...');
      streamRef.current.getTracks().forEach(track => {
        console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫:', track.kind, track.label);
        track.stop();
      });
      streamRef.current = null;
    }
    
    // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setCallState({
      isConnected: false,
      isVideoOn: false,
      isAudioOn: false,
      isRecording: false,
      callDuration: 0,
      connectionQuality: 'excellent',
      isConnecting: false,
      isFrontCamera: true
    });
    
    setCurrentView('doctors');
    setSelectedDoctor(null);
    setIsCalling(false);
    
    toast.success('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      description: '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω—ã'
    });
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ
  const toggleVideo = async () => {
    console.log('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', callState.isVideoOn);
    
    if (!callState.isVideoOn) {
      // –í–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ
      console.log('–í–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–º–µ—Ä—ã
      const cameraSupported = await checkCameraSupport();
      if (!cameraSupported) {
        return;
      }
      
      try {
        const constraints = {
          video: {
            width: { ideal: 1280, min: 640 },
            height: { ideal: 720, min: 480 },
            facingMode: callState.isFrontCamera ? 'user' : 'environment',
            frameRate: { ideal: 30, min: 15 }
          },
          audio: false
        };
        
        const stream = await navigator.mediaDevices.getUserMedia(constraints);
        
        console.log('–ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫:', stream.getVideoTracks());
        
        if (streamRef.current) {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∏
          const oldVideoTracks = streamRef.current.getVideoTracks();
          oldVideoTracks.forEach(track => {
            track.stop();
            streamRef.current?.removeTrack(track);
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
          const newVideoTrack = stream.getVideoTracks()[0];
          if (newVideoTrack) {
            streamRef.current.addTrack(newVideoTrack);
          }
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–æ–Ω–∏ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω—ã)
          stream.getAudioTracks().forEach(track => track.stop());
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          streamRef.current = stream;
        }
        
        if (videoRef.current) {
          videoRef.current.srcObject = streamRef.current;
          
          // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
          await new Promise((resolve, reject) => {
            if (videoRef.current) {
              videoRef.current.onloadedmetadata = resolve;
              videoRef.current.onerror = reject;
              
              setTimeout(() => {
                if (videoRef.current?.readyState >= 1) {
                  resolve(null);
                } else {
                  reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ'));
                }
              }, 3000);
            }
          });
          
          await videoRef.current.play();
          console.log('–í–∏–¥–µ–æ –≤–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          setCallState(prev => ({ ...prev, isVideoOn: true }));
          
          toast.success('–ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞!', {
            description: '–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω'
          });
        }
        
      } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É:', error);
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É';
        if (error.name === 'NotAllowedError') {
          errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω';
        } else if (error.name === 'NotFoundError') {
          errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
        } else if (error.name === 'NotReadableError') {
          errorMessage = '–ö–∞–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º';
        }
        
        toast.error(errorMessage, {
          description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã'
        });
      }
    } else {
      // –í—ã–∫–ª—é—á–∞–µ–º –≤–∏–¥–µ–æ
      console.log('–í—ã–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É...');
      if (streamRef.current) {
        const videoTracks = streamRef.current.getVideoTracks();
        videoTracks.forEach(track => {
          track.stop();
          streamRef.current?.removeTrack(track);
        });
        
        if (videoRef.current) {
          videoRef.current.srcObject = null;
        }
      }
      
      setCallState(prev => ({ ...prev, isVideoOn: false }));
      console.log('–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞');
      
      toast.success('–ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞', {
        description: '–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      });
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã (—Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è/–∑–∞–¥–Ω—è—è)
  const toggleCamera = async () => {
    if (!callState.isVideoOn) return;
    
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { 
          width: 1280, 
          height: 720,
          facingMode: !callState.isFrontCamera ? 'user' : 'environment'
        },
        audio: false
      });
      
      const videoTrack = stream.getVideoTracks()[0];
      if (videoTrack && streamRef.current) {
        // –ó–∞–º–µ–Ω—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
        const currentStream = streamRef.current;
        if (currentStream.getVideoTracks()[0]) {
          currentStream.removeTrack(currentStream.getVideoTracks()[0]);
        }
        currentStream.addTrack(videoTrack);
        
        if (videoRef.current) {
          videoRef.current.srcObject = currentStream;
        }
      }
      
      setCallState(prev => ({ ...prev, isFrontCamera: !prev.isFrontCamera }));
      toast.success('–ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞', {
        description: callState.isFrontCamera ? '–¢–µ–ø–µ—Ä—å –∑–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞' : '–¢–µ–ø–µ—Ä—å —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞'
      });
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É');
      toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É');
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const toggleFullscreen = async () => {
    try {
      const videoContainer = document.querySelector('.video-container') as HTMLElement;
      if (!videoContainer) {
        toast.error('–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      if (!document.fullscreenElement) {
        // –ü—Ä–æ–±—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        const methods = [
          () => videoContainer.requestFullscreen(),
          () => (videoContainer as any).webkitRequestFullscreen(),
          () => (videoContainer as any).mozRequestFullScreen(),
          () => (videoContainer as any).msRequestFullscreen(),
          () => {
            // Fallback –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if (videoContainer.requestFullscreen) {
              return videoContainer.requestFullscreen();
            }
            throw new Error('Fullscreen not supported');
          }
        ];

        let success = false;
        for (const method of methods) {
          try {
            await method();
            success = true;
            break;
          } catch (e) {
            continue;
          }
        }

        if (success) {
          setCallState(prev => ({ ...prev, isFullscreen: true }));
          toast.success('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω');
        } else {
          throw new Error('Fullscreen not supported');
        }
      } else {
        // –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const methods = [
          () => document.exitFullscreen(),
          () => (document as any).webkitExitFullscreen(),
          () => (document as any).mozCancelFullScreen(),
          () => (document as any).msExitFullscreen()
        ];

        for (const method of methods) {
          try {
            await method();
            break;
          } catch (e) {
            continue;
          }
        }

        setCallState(prev => ({ ...prev, isFullscreen: false }));
        toast.success('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω');
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
      
      // –ï—Å–ª–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
      if (callState.isFullscreen) {
        // –í—ã—Ö–æ–¥ –∏–∑ –ø—Å–µ–≤–¥–æ-–ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const fullscreenOverlay = document.getElementById('fullscreen-overlay');
        if (fullscreenOverlay) {
          fullscreenOverlay.remove();
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const fullscreenControls = document.querySelector('.fullscreen-controls') as HTMLElement;
        if (fullscreenControls) {
          fullscreenControls.style.display = 'none';
        }
        
        setCallState(prev => ({ ...prev, isFullscreen: false }));
        toast.success('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω');
      } else {
        // –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-–ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ CSS
        const videoContainer = document.querySelector('.video-container') as HTMLElement;
        if (videoContainer) {
          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π
          const fullscreenOverlay = document.createElement('div');
          fullscreenOverlay.id = 'fullscreen-overlay';
          fullscreenOverlay.style.position = 'fixed';
          fullscreenOverlay.style.top = '0';
          fullscreenOverlay.style.left = '0';
          fullscreenOverlay.style.width = '100vw';
          fullscreenOverlay.style.height = '100vh';
          fullscreenOverlay.style.backgroundColor = 'black';
          fullscreenOverlay.style.zIndex = '9999';
          fullscreenOverlay.style.display = 'flex';
          fullscreenOverlay.style.alignItems = 'center';
          fullscreenOverlay.style.justifyContent = 'center';
          
          // –ö–ª–æ–Ω–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
          const videoElement = videoRef.current;
          if (videoElement) {
            const videoClone = videoElement.cloneNode(true) as HTMLVideoElement;
            videoClone.style.width = '100%';
            videoClone.style.height = '100%';
            videoClone.style.objectFit = 'contain';
            fullscreenOverlay.appendChild(videoClone);
          }
          
          document.body.appendChild(fullscreenOverlay);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          const fullscreenControls = document.querySelector('.fullscreen-controls') as HTMLElement;
          if (fullscreenControls) {
            fullscreenControls.style.display = 'flex';
          }
          
          setCallState(prev => ({ ...prev, isFullscreen: true }));
          toast.success('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω');
        }
      }
    }
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const toggleAudio = () => {
    setCallState(prev => ({ ...prev, isAudioOn: !prev.isAudioOn }));
  };

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤
  const toggleSymptomDemo = () => {
    setShowSymptomDemo(!showSymptomDemo);
    if (!showSymptomDemo) {
      analyzeSymptoms();
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤
  const handleSymptomAnalysisComplete = (results: any[]) => {
    setSymptomAnalysis({
      detected: results.map(r => r.symptom),
      confidence: Math.round(results.reduce((acc, r) => acc + r.confidence, 0) / results.length),
      recommendations: results.map(r => r.recommendation),
      urgency: results.some(r => r.severity === 'high') ? 'high' : 
               results.some(r => r.severity === 'medium') ? 'medium' : 'low'
    });
    setShowSymptomAnalyzer(false);
    
    toast.success('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!', {
      description: `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${results.length} —Å–∏–º–ø—Ç–æ–º–æ–≤`
    });
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
  const openChat = (doctor: any) => {
    console.log('Opening chat for doctor:', doctor);
    setCurrentDoctor(doctor);
    setIsChatOpen(true);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
  const closeChat = () => {
    setIsChatOpen(false);
    setCurrentDoctor(null);
  };

  // –§—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞
  const sendMessage = () => {
    if (!newMessage.trim()) return;

    const message = {
      id: Date.now(),
      text: newMessage,
      sender: 'user',
      timestamp: new Date(),
      status: 'sent'
    };

    setChatMessages(prev => [...prev, message]);
    setNewMessage('');

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –≤—Ä–∞—á–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      const responses = [
        "–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.",
        "–•–æ—Ä–æ—à–æ, —ç—Ç–æ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–∫–∞–∑–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞.",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –ê –∫–∞–∫ –¥–∞–≤–Ω–æ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å?",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ."
      ];
      
      const doctorMessage = {
        id: Date.now() + 1,
        text: responses[Math.floor(Math.random() * responses.length)],
        sender: 'doctor',
        timestamp: new Date(),
        status: 'read'
      };
      
      setChatMessages(prev => [...prev, doctorMessage]);
    }, 2000);
  };

const handleFileUpload = () => {
  setShowFilePicker(!showFilePicker);
  toast.success('–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤', {
    description: '–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤'
  });
};

const handleEmojiClick = (emoji: string) => {
  setNewMessage(prev => prev + emoji);
  setShowEmojiPicker(false);
};

const emojis = ['üòä', 'üò¢', 'üòç', 'ü§î', 'üëç', 'üëé', '‚ù§Ô∏è', 'üê±', 'üê∂', 'üíä', 'üè•', '‚öïÔ∏è'];

  const formatChatTime = (timestamp: Date) => {
    return timestamp.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const getMessageStatusIcon = (status: string) => {
    switch (status) {
      case 'sent':
        return <div className="w-3 h-3 flex items-center justify-center">
          <Check className="w-2 h-2 text-gray-400" />
        </div>;
      case 'delivered':
        return <div className="w-3 h-3 flex items-center justify-center">
          <div className="flex">
            <Check className="w-2 h-2 text-gray-400" />
            <Check className="w-2 h-2 text-gray-400 ml-[-2px]" />
          </div>
        </div>;
      case 'read':
        return <div className="w-3 h-3 flex items-center justify-center">
          <div className="flex">
            <Check className="w-2 h-2 text-blue-500" />
            <Check className="w-2 h-2 text-blue-500 ml-[-2px]" />
          </div>
        </div>;
      default:
        return null;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    const handleFullscreenChange = () => {
      setCallState(prev => ({ 
        ...prev, 
        isFullscreen: !!document.fullscreenElement 
      }));
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
    document.addEventListener('msfullscreenchange', handleFullscreenChange);

    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
      document.removeEventListener('webkitfullscreenchange', handleFullscreenChange);
      document.removeEventListener('msfullscreenchange', handleFullscreenChange);
    };
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      console.log('üßπ –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏...');
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
      if (callTimerRef.current) {
        clearInterval(callTimerRef.current);
        callTimerRef.current = null;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
      if (recordingRef.current && recordingRef.current.state === 'recording') {
        recordingRef.current.stop();
        recordingRef.current = null;
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫
      if (streamRef.current) {
        console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫...');
        streamRef.current.getTracks().forEach(track => {
          console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–∫:', track.kind, track.label);
          track.stop();
        });
        streamRef.current = null;
      }
      
      // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
      if (videoRef.current) {
        videoRef.current.srcObject = null;
      }
    };
  }, []);

  if (currentView === 'call') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 pt-20 pb-20 overflow-x-hidden">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–≤–æ–Ω–∫–∞ */}
        <div className="bg-white dark:bg-gray-800 shadow-sm border-b mx-2 sm:mx-4 rounded-t-xl">
          <div className="w-full px-2 sm:px-4 py-3">
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
              <div className="flex items-center gap-3">
                <Avatar className="w-10 h-10 sm:w-12 sm:h-12">
                  <AvatarImage 
                    src={selectedDoctor?.avatar} 
                    className="object-cover object-top"
                  />
                  <AvatarFallback className="text-sm font-semibold">
                    {selectedDoctor?.name.split(' ').map(n => n[0]).join('')}
                  </AvatarFallback>
                </Avatar>
                <div>
                  <div className="flex items-center gap-2 mb-1">
                    <h2 className="text-base sm:text-lg font-semibold">{selectedDoctor?.name}</h2>
                    <Badge variant="secondary" className="bg-green-100 text-green-800 text-xs">
                      <div className="w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse"></div>
                      –û–Ω–ª–∞–π–Ω
                    </Badge>
                  </div>
                  <p className="text-xs text-muted-foreground hidden sm:block">{selectedDoctor?.specialty}</p>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <div className="flex items-center gap-1 bg-gray-50 dark:bg-gray-700 px-2 py-1 rounded-lg">
                  <Wifi className="w-3 h-3 text-green-500" />
                  <span className="text-xs font-medium capitalize">{callState.connectionQuality}</span>
                </div>
                
                <div className="flex items-center gap-1 bg-gray-50 dark:bg-gray-700 px-2 py-1 rounded-lg">
                  <Clock className="w-3 h-3" />
                  <span className="text-xs font-medium">{formatTime(callState.callDuration)}</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="w-full px-2 sm:px-4 py-4">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-2 sm:gap-4">
            {/* –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ */}
            <div className="lg:col-span-2">
              <Card className="overflow-hidden bg-black shadow-2xl border-0 video-container">
                <div className="video-content">
                <div className="relative aspect-video">
                  <video
                    ref={videoRef}
                    autoPlay
                    playsInline
                    muted
                    className="w-full h-full object-cover"
                    style={{ transform: 'scaleX(-1)' }} // –ó–µ—Ä–∫–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤ Skype
                    onLoadStart={() => console.log('üìπ –í–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è')}
                    onLoadedMetadata={() => console.log('üìπ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')}
                    onCanPlay={() => console.log('üìπ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')}
                    onPlay={() => console.log('‚ñ∂Ô∏è –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è')}
                    onError={(e) => console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ:', e)}
                  />
                  
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                  {callState.isConnecting && (
                    <div className="absolute inset-0 bg-gradient-to-br from-blue-900/80 to-purple-900/80 flex items-center justify-center backdrop-blur-sm">
                      <div className="text-center text-white">
                        <div className="relative mb-6">
                          <div className="w-20 h-20 mx-auto border-4 border-white/30 border-t-white rounded-full animate-spin"></div>
                          <div className="absolute inset-0 flex items-center justify-center">
                            <Phone className="w-8 h-8 text-white" />
                          </div>
                        </div>
                        <h3 className="text-xl font-bold mb-2">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—Ä–∞—á—É...</h3>
                        <p className="text-blue-100 mb-4">–î—Ä. {selectedDoctor?.name}</p>
                        <div className="flex justify-center">
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-white rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                            <div className="w-2 h-2 bg-white rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* –ù–∞–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ */}
                  {showSymptomDemo && (
                    <div className="absolute inset-0 bg-gradient-to-br from-blue-900/80 to-purple-900/80 flex items-center justify-center backdrop-blur-sm">
                      <div className="text-center text-white">
                        <div className="relative">
                          <Activity className="w-16 h-16 mx-auto mb-4 animate-pulse text-blue-300" />
                          <div className="absolute inset-0 w-16 h-16 mx-auto bg-blue-500/20 rounded-full animate-ping"></div>
                        </div>
                        <h3 className="text-xl font-bold mb-2">AI –ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤</h3>
                        <p className="text-blue-100">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞...</p>
                        <div className="mt-3 flex justify-center">
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
                  <div className="absolute top-3 left-3 flex gap-2">
                    {callState.isVideoOn && streamRef.current && streamRef.current.getVideoTracks().length > 0 ? (
                      <Badge variant="secondary" className="bg-green-500 text-white shadow-lg text-xs px-2 py-1">
                        <Video className="w-3 h-3 mr-1" />
                        –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞
                      </Badge>
                    ) : (
                      <Badge variant="secondary" className="bg-red-500 text-white shadow-lg text-xs px-2 py-1">
                        <VideoOff className="w-3 h-3 mr-1" />
                        –ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
                      </Badge>
                    )}
                    {!callState.isAudioOn && (
                      <Badge variant="secondary" className="bg-red-500 text-white shadow-lg text-xs px-2 py-1">
                        <MicOff className="w-3 h-3 mr-1" />
                        –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω
                      </Badge>
                    )}
                    {callState.isAudioOn && (
                      <Badge variant="secondary" className="bg-green-500 text-white shadow-lg text-xs px-2 py-1">
                        <Mic className="w-3 h-3 mr-1" />
                        –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω
                      </Badge>
                    )}
                  </div>

                </div>
                </div>
              </Card>

              {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
              <Card className="mt-4 p-3 bg-gradient-to-r from-gray-50 to-blue-50 dark:from-gray-800 dark:to-blue-900/20 shadow-lg">
                <div className="flex items-center justify-center gap-2 flex-wrap">
                  <Button
                    variant={callState.isVideoOn ? "default" : "destructive"}
                    size="sm"
                    onClick={toggleVideo}
                    className="rounded-full w-10 h-10 shadow-md hover:shadow-lg transition-all duration-200"
                    title="–ö–∞–º–µ—Ä–∞"
                  >
                    {callState.isVideoOn ? <Video className="w-4 h-4" /> : <VideoOff className="w-4 h-4" />}
                  </Button>
                  
                  <Button
                    variant="secondary"
                    size="sm"
                    onClick={toggleCamera}
                    disabled={!callState.isVideoOn}
                    className="rounded-full w-10 h-10 shadow-md hover:shadow-lg transition-all duration-200 bg-blue-500 hover:bg-blue-600 text-white"
                    title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É"
                  >
                    <FlipHorizontal className="w-4 h-4" />
                  </Button>
                  
                  
                  <Button
                    variant={callState.isAudioOn ? "default" : "destructive"}
                    size="sm"
                    onClick={toggleAudio}
                    className="rounded-full w-10 h-10 shadow-md hover:shadow-lg transition-all duration-200"
                    title="–ú–∏–∫—Ä–æ—Ñ–æ–Ω"
                  >
                    {callState.isAudioOn ? <Mic className="w-4 h-4" /> : <MicOff className="w-4 h-4" />}
                  </Button>
                  
                  <Button
                    variant="secondary"
                    size="sm"
                    onClick={() => openChat(selectedDoctor)}
                    className="rounded-full w-10 h-10 shadow-md hover:shadow-lg transition-all duration-200 bg-green-500 hover:bg-green-600 text-white"
                    title="–ß–∞—Ç"
                  >
                    <MessageCircle className="w-4 h-4" />
                  </Button>
                  
                  <Button
                    variant="destructive"
                    size="sm"
                    onClick={endCall}
                    className="rounded-full w-10 h-10 shadow-md hover:shadow-lg transition-all duration-200"
                    title="–ó–∞–≤–µ—Ä—à–∏—Ç—å"
                  >
                    <Phone className="w-4 h-4" />
                  </Button>
                </div>
              </Card>
            </div>

            {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
            <div className="space-y-2 sm:space-y-3">
              {/* –ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ */}
              {symptomAnalysis && (
                <Card className="p-3">
                  <div className="flex items-center gap-2 mb-3">
                    <Activity className="w-4 h-4 text-blue-500" />
                    <h3 className="font-semibold text-sm">AI –ê–Ω–∞–ª–∏–∑</h3>
                  </div>
                  
                  <div className="space-y-2">
                    <div>
                      <div className="flex justify-between text-xs mb-1">
                        <span>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å</span>
                        <span>{symptomAnalysis.confidence}%</span>
                      </div>
                      <Progress value={symptomAnalysis.confidence} className="h-1" />
                    </div>
                    
                    <div>
                      <p className="text-xs font-medium mb-1">–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã:</p>
                      <div className="space-y-1">
                        {symptomAnalysis.detected.map((symptom, index) => (
                          <Badge key={index} variant="outline" className="text-xs">
                            {symptom}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    
                    <div>
                      <p className="text-xs font-medium mb-1">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</p>
                      <div className="space-y-1">
                        {symptomAnalysis.recommendations.map((rec, index) => (
                          <div key={index} className="flex items-start gap-2 text-xs">
                            <CheckCircle className="w-3 h-3 text-green-500 mt-0.5 flex-shrink-0" />
                            <span>{rec}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <div className="pt-2 border-t">
                      <div className="flex items-center gap-2">
                        <AlertCircle className={`w-3 h-3 ${
                          symptomAnalysis.urgency === 'high' ? 'text-red-500' :
                          symptomAnalysis.urgency === 'medium' ? 'text-yellow-500' : 'text-green-500'
                        }`} />
                        <span className="text-xs font-medium capitalize">
                          –°—Ä–æ—á–Ω–æ—Å—Ç—å: {symptomAnalysis.urgency}
                        </span>
                      </div>
                    </div>
                  </div>
                </Card>
              )}

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–µ */}
              <Card className="p-3">
                <div className="flex items-center gap-3 mb-3">
                  <Avatar className="w-10 h-10">
                    <AvatarImage 
                      src={selectedDoctor?.avatar} 
                      className="object-cover object-top"
                    />
                    <AvatarFallback className="text-xs font-semibold">
                      {selectedDoctor?.name.split(' ').map(n => n[0]).join('')}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <h4 className="font-semibold text-sm">{selectedDoctor?.name}</h4>
                    <p className="text-xs text-muted-foreground">{selectedDoctor?.specialty}</p>
                  </div>
                </div>
                
                <div className="space-y-2 text-xs">
                  <div className="flex justify-between">
                    <span>–û–ø—ã—Ç:</span>
                    <span className="font-medium">{selectedDoctor?.experience}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>–†–µ–π—Ç–∏–Ω–≥:</span>
                    <div className="flex items-center gap-1">
                      <Star className="w-3 h-3 fill-yellow-400 text-yellow-400" />
                      <span className="font-medium">{selectedDoctor?.rating}</span>
                    </div>
                  </div>
                  <div className="flex justify-between">
                    <span>–°—Ç–∞—Ç—É—Å:</span>
                    <Badge variant="secondary" className="bg-green-100 text-green-800 text-xs">
                      <div className="w-2 h-2 bg-green-500 rounded-full mr-1"></div>
                      –û–Ω–ª–∞–π–Ω
                    </Badge>
                  </div>
                </div>
              </Card>

              {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              <Card className="p-3">
                <h4 className="font-semibold text-sm mb-3">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h4>
                <div className="space-y-2">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="w-full justify-start text-xs h-8"
                    onClick={() => setIsChatOpen(true)}
                  >
                    <MessageCircle className="w-3 h-3 mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="w-full justify-start text-xs h-8"
                    onClick={() => {
                      toast.success('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', {
                        description: '–ó–∞–ø–∏—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å—Å—ã–ª–∫–µ'
                      });
                    }}
                  >
                    <Share className="w-3 h-3 mr-2" />
                    –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∑–∞–ø–∏—Å—å—é
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="w-full justify-start text-xs h-8"
                    onClick={() => {
                      toast.success('–û—Ç—á–µ—Ç —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è...', {
                        description: 'PDF —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–∏–º–ø—Ç–æ–º–æ–≤ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω'
                      });
                    }}
                  >
                    <Download className="w-3 h-3 mr-2" />
                    –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                  </Button>
                </div>
              </Card>
            </div>
          </div>
        </div>

        {/* –ß–∞—Ç –æ–∫–Ω–æ */}
        {isChatOpen && currentDoctor && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[99999] p-4" onClick={(e) => {
            if (e.target === e.currentTarget) {
              closeChat();
            }
          }}>
            <div className="bg-white dark:bg-gray-900 rounded-lg w-full max-w-sm h-[60vh] max-h-[500px] overflow-hidden flex flex-col shadow-2xl">
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700 bg-green-500 text-white">
                <div className="flex items-center gap-3">
                  <Avatar className="w-8 h-8">
                    <AvatarImage 
                      src={currentDoctor?.avatar} 
                      className="object-cover object-top"
                    />
                    <AvatarFallback className="text-xs bg-white text-green-500">
                      {currentDoctor?.name.split(' ').map(n => n[0]).join('')}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <h3 className="font-semibold text-sm">{currentDoctor?.name}</h3>
                    <p className="text-xs text-green-100">–í —Å–µ—Ç–∏</p>
                  </div>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setIsChatOpen(false)}
                  className="h-8 w-8 p-0 text-white hover:bg-green-600"
                >
                  <X className="w-4 h-4" />
                </Button>
              </div>

              {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="flex-1 overflow-y-auto p-4 space-y-3">
                {chatMessages.map((message) => (
                  <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-[80%] ${message.sender === 'user' ? 'order-2' : 'order-1'}`}>
                      <div className={`px-3 py-2 rounded-lg text-sm ${
                        message.sender === 'user' 
                          ? 'bg-green-500 text-white' 
                          : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100'
                      }`}>
                        {message.text}
                      </div>
                      <div className={`flex items-center gap-1 mt-1 text-xs text-gray-500 ${
                        message.sender === 'user' ? 'justify-end' : 'justify-start'
                      }`}>
                        <span>{formatChatTime(message.timestamp)}</span>
                        {message.sender === 'user' && (
                          <div className="ml-1">
                            {getMessageStatusIcon(message.status)}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="p-3 border-t border-gray-200 dark:border-gray-700 relative flex-shrink-0">
              {/* –≠–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä */}
              {showEmojiPicker && (
                <div className="absolute bottom-12 left-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg p-2 shadow-lg z-10">
                  <div className="grid grid-cols-6 gap-2">
                    {emojis.map((emoji, index) => (
                      <button
                        key={index}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleEmojiClick(emoji);
                        }}
                        className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                </div>
              )}
              
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-gray-500 hover:text-gray-700"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleFileUpload();
                  }}
                >
                  <Paperclip className="w-4 h-4" />
                </Button>
                <div className="flex-1 relative">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' && newMessage.trim()) {
                        sendMessage();
                      }
                    }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-full bg-white dark:bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-green-500"
                    onClick={(e) => e.stopPropagation()}
                  />
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-gray-500 hover:text-gray-700"
                  onClick={(e) => {
                    e.stopPropagation();
                    setShowEmojiPicker(!showEmojiPicker);
                  }}
                >
                  <Smile className="w-4 h-4" />
                </Button>
                <Button
                  onClick={(e) => {
                    e.stopPropagation();
                    if (newMessage.trim()) {
                      sendMessage();
                    }
                  }}
                  disabled={!newMessage.trim()}
                  className="h-8 w-8 p-0 bg-green-500 hover:bg-green-600 text-white disabled:bg-gray-300"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
            </div>
          </div>
        )}
        
        {/* –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="fullscreen-controls" style={{display: 'none', position: 'fixed', bottom: '80px', left: '50%', transform: 'translateX(-50%)', zIndex: '10000'}}>
          <div className="flex items-center gap-3 bg-black/90 backdrop-blur-sm rounded-full px-6 py-4 shadow-2xl border border-white/20">
            <Button
              variant={callState.isVideoOn ? "default" : "destructive"}
              size="sm"
              onClick={toggleVideo}
              className="rounded-full w-12 h-12 shadow-lg hover:shadow-xl transition-all duration-200"
              title="–ö–∞–º–µ—Ä–∞"
            >
              {callState.isVideoOn ? <Video className="w-5 h-5" /> : <VideoOff className="w-5 h-5" />}
            </Button>
            
            <Button
              variant="secondary"
              size="sm"
              onClick={toggleCamera}
              disabled={!callState.isVideoOn}
              className="rounded-full w-12 h-12 shadow-lg hover:shadow-xl transition-all duration-200 bg-blue-500 hover:bg-blue-600 text-white"
              title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É"
            >
              <FlipHorizontal className="w-5 h-5" />
            </Button>
            
            
            <Button
              variant={callState.isAudioOn ? "default" : "destructive"}
              size="sm"
              onClick={toggleAudio}
              className="rounded-full w-12 h-12 shadow-lg hover:shadow-xl transition-all duration-200"
              title="–ú–∏–∫—Ä–æ—Ñ–æ–Ω"
            >
              {callState.isAudioOn ? <Mic className="w-5 h-5" /> : <MicOff className="w-5 h-5" />}
            </Button>
            
            <Button
              variant="secondary"
              size="sm"
              onClick={() => openChat(selectedDoctor)}
              className="rounded-full w-12 h-12 shadow-lg hover:shadow-xl transition-all duration-200 bg-green-500 hover:bg-green-600 text-white"
              title="–ß–∞—Ç"
            >
              <MessageCircle className="w-5 h-5" />
            </Button>
            
            <Button
              variant="destructive"
              size="sm"
              onClick={endCall}
              className="rounded-full w-12 h-12 shadow-lg hover:shadow-xl transition-all duration-200"
              title="–ó–∞–≤–µ—Ä—à–∏—Ç—å"
            >
              <Phone className="w-5 h-5" />
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 pt-16 ios-scroll-fix">
      <div className="max-w-6xl mx-auto p-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-6">
          <div className="flex items-center justify-center gap-2 mb-3">
            <div className="p-2 bg-blue-100 dark:bg-blue-900/30 rounded-full">
              <Video className="w-5 h-5 text-blue-600 dark:text-blue-400" />
            </div>
            <h1 className="text-xl font-bold">–¢–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞</h1>
          </div>
          <p className="text-sm text-muted-foreground max-w-2xl mx-auto">
            –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. 
            AI-–∞–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤, –∑–∞–ø–∏—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
          </p>
        </div>

        {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <Card className="p-4 text-center">
            <Video className="w-8 h-8 text-blue-500 mx-auto mb-2" />
            <h3 className="font-semibold mb-1">–í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ HD</h3>
            <p className="text-sm text-muted-foreground">–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–≤—è–∑—å 1080p</p>
          </Card>
          <Card className="p-4 text-center">
            <Activity className="w-8 h-8 text-green-500 mx-auto mb-2" />
            <h3 className="font-semibold mb-1">AI –ê–Ω–∞–ª–∏–∑</h3>
            <p className="text-sm text-muted-foreground">–£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤</p>
          </Card>
          <Card className="p-4 text-center">
            <Download className="w-8 h-8 text-purple-500 mx-auto mb-2" />
            <h3 className="font-semibold mb-1">–ó–∞–ø–∏—Å—å</h3>
            <p className="text-sm text-muted-foreground">–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</p>
          </Card>
        </div>

        {/* –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã */}
        <Card className="p-6 mb-8">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <Video className="w-5 h-5 text-blue-500" />
            –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
          </h3>
          <div className="space-y-4">
            <Button 
              onClick={async () => {
                console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É...');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–º–µ—Ä—ã
                const cameraSupported = await checkCameraSupport();
                if (!cameraSupported) {
                  return;
                }
                
                try {
                  const constraints = {
                    video: {
                      width: { ideal: 1280, min: 640 },
                      height: { ideal: 720, min: 480 },
                      facingMode: 'user',
                      frameRate: { ideal: 30, min: 15 }
                    },
                    audio: false
                  };
                  
                  console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:', constraints);
                  const stream = await navigator.mediaDevices.getUserMedia(constraints);
                  
                  console.log('‚úÖ –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã —É—Å–ø–µ—à–µ–Ω:', stream);
                  console.log('üìπ –í–∏–¥–µ–æ —Ç—Ä–µ–∫–∏:', stream.getVideoTracks());
                  
                  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ
                  const videoTrack = stream.getVideoTracks()[0];
                  if (videoTrack) {
                    const settings = videoTrack.getSettings();
                    console.log('üìπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã:', settings);
                    
                    toast.success('–ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!', {
                      description: `–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${settings.width}x${settings.height}, FPS: ${settings.frameRate}`
                    });
                  } else {
                    toast.success('–ö–∞–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!', {
                      description: '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ'
                    });
                  }
                  
                  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
                  stream.getTracks().forEach(track => track.stop());
                } catch (error) {
                  console.error('‚ùå –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã –Ω–µ —É–¥–∞–ª—Å—è:', error);
                  
                  let errorMessage = '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ';
                  let errorDescription = error.message;
                  
                  if (error.name === 'NotAllowedError') {
                    errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω';
                    errorDescription = '–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞';
                  } else if (error.name === 'NotFoundError') {
                    errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
                    errorDescription = '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–º–µ—Ä—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
                  } else if (error.name === 'NotReadableError') {
                    errorMessage = '–ö–∞–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
                    errorDescription = '–ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É';
                  } else if (error.name === 'SecurityError') {
                    errorMessage = '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏';
                    errorDescription = '–¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ';
                  }
                  
                  toast.error(errorMessage, {
                    description: errorDescription
                  });
                }
              }}
              className="w-full"
            >
              <Video className="w-4 h-4 mr-2" />
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–º–µ—Ä—É
            </Button>
            <div className="space-y-2">
              <p className="text-sm text-muted-foreground">
                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –ø–µ—Ä–µ–¥ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–º
              </p>
              <div className="text-xs text-muted-foreground space-y-1">
                <p>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∞–π—Ç –æ—Ç–∫—Ä—ã—Ç –ø–æ HTTPS</p>
                <p>‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</p>
                <p>‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –∫–∞–º–µ—Ä—É</p>
              </div>
            </div>
          </div>
        </Card>

        {/* –°–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {doctors.map((doctor) => (
            <Card key={doctor.id} className="p-6 hover:shadow-lg transition-shadow">
              <div className="flex items-start gap-4 mb-4">
                <Avatar className="w-16 h-16">
                  <AvatarImage 
                    src={doctor.avatar} 
                    className="object-cover object-top"
                  />
                  <AvatarFallback className="text-lg font-semibold">
                    {doctor.name.split(' ').map(n => n[0]).join('')}
                  </AvatarFallback>
                </Avatar>
                
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <h3 className="font-semibold text-lg">{doctor.name}</h3>
                    {doctor.isOnline ? (
                      <Badge variant="secondary" className="bg-green-100 text-green-800">
                        <div className="w-2 h-2 bg-green-500 rounded-full mr-1"></div>
                        –û–Ω–ª–∞–π–Ω
                      </Badge>
                    ) : (
                      <Badge variant="outline">
                        <div className="w-2 h-2 bg-gray-400 rounded-full mr-1"></div>
                        –û—Ñ–ª–∞–π–Ω
                      </Badge>
                    )}
                  </div>
                  
                  <p className="text-sm text-muted-foreground mb-2">{doctor.specialty}</p>
                  
                  <div className="flex items-center gap-4 text-sm">
                    <div className="flex items-center gap-1">
                      <Star className="w-4 h-4 fill-yellow-400 text-yellow-400" />
                      <span className="font-medium">{doctor.rating}</span>
                    </div>
                    <span className="text-muted-foreground">{doctor.experience}</span>
                  </div>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="flex gap-2">
                  <Button 
                    className="flex-1" 
                    onClick={() => startVideoCall(doctor)}
                    disabled={!doctor.isOnline || isCalling}
                  >
                    <PhoneCall className="w-4 h-4 mr-2" />
                    {isCalling ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫'}
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    size="icon"
                    onClick={() => openChat(doctor)}
                  >
                    <MessageCircle className="w-4 h-4" />
                  </Button>
                </div>
                
                <div className="text-xs text-muted-foreground">
                  <div className="flex justify-between">
                    <span>–î–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å</span>
                    <span>–û—Ç 2500‚ÇΩ/—á–∞—Å</span>
                  </div>
                </div>
              </div>
            </Card>
          ))}
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Card className="mt-8 p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Shield className="w-5 h-5 text-green-500" />
                –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
              </h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li>‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤</li>
                <li>‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ GDPR</li>
                <li>‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π</li>
                <li>‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</li>
              </ul>
            </div>
            
            <div>
              <h3 className="font-semibold mb-3 flex items-center gap-2">
                <Zap className="w-5 h-5 text-blue-500" />
                –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
              </h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li>‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
                <li>‚Ä¢ –ó–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</li>
                <li>‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
                <li>‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏</li>
              </ul>
            </div>
          </div>
        </Card>
      </div>

      {/* –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç */}
      {isChatOpen && currentDoctor && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4" onClick={closeChat}>
          <div className="bg-white rounded-lg w-full max-w-md h-[500px] flex flex-col shadow-xl">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center justify-between p-4 bg-green-500 text-white rounded-t-lg">
              <div className="flex items-center gap-3">
                <Avatar className="w-8 h-8">
                  <AvatarImage src={currentDoctor.avatar} />
                  <AvatarFallback>{currentDoctor.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
                </Avatar>
                <div>
                  <h3 className="font-semibold">{currentDoctor.name}</h3>
                  <p className="text-xs text-green-100">–û–Ω–ª–∞–π–Ω</p>
                </div>
              </div>
              <Button variant="ghost" size="sm" onClick={closeChat} className="text-white hover:bg-green-600">
                <X className="w-4 h-4" />
              </Button>
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="flex-1 overflow-y-auto p-3 space-y-2 min-h-0">
              {chatMessages.map((message) => (
                <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`max-w-[80%] ${message.sender === 'user' ? 'order-2' : 'order-1'}`}>
                    <div className={`px-3 py-2 rounded-lg text-sm ${
                      message.sender === 'user' 
                        ? 'bg-green-500 text-white' 
                        : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100'
                    }`}>
                      {message.text}
                    </div>
                    <div className={`flex items-center gap-1 mt-1 text-xs text-gray-500 ${
                      message.sender === 'user' ? 'justify-end' : 'justify-start'
                    }`}>
                      <span>{formatChatTime(message.timestamp)}</span>
                      {message.sender === 'user' && (
                        <div className="ml-1">
                          {getMessageStatusIcon(message.status)}
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="p-3 border-t border-gray-200 dark:border-gray-700 relative flex-shrink-0">
              {/* –≠–º–æ–¥–∑–∏ –ø–∏–∫–µ—Ä */}
              {showEmojiPicker && (
                <div className="absolute bottom-12 left-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-600 rounded-lg p-2 shadow-lg z-10">
                  <div className="grid grid-cols-6 gap-2">
                    {emojis.map((emoji, index) => (
                      <button
                        key={index}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleEmojiClick(emoji);
                        }}
                        className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
                      >
                        {emoji}
                      </button>
                    ))}
                  </div>
                </div>
              )}
              
              <div className="flex items-center gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-gray-500 hover:text-gray-700"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleFileUpload();
                  }}
                >
                  <Paperclip className="w-4 h-4" />
                </Button>
                <div className="flex-1 relative">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter' && newMessage.trim()) {
                        sendMessage();
                      }
                    }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-full bg-white dark:bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-green-500"
                    onClick={(e) => e.stopPropagation()}
                  />
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-8 w-8 p-0 text-gray-500 hover:text-gray-700"
                  onClick={(e) => {
                    e.stopPropagation();
                    setShowEmojiPicker(!showEmojiPicker);
                  }}
                >
                  <Smile className="w-4 h-4" />
                </Button>
                <Button
                  onClick={(e) => {
                    e.stopPropagation();
                    if (newMessage.trim()) {
                      sendMessage();
                    }
                  }}
                  disabled={!newMessage.trim()}
                  className="h-8 w-8 p-0 bg-green-500 hover:bg-green-600 text-white disabled:bg-gray-300"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ */}
      <SymptomAnalyzer
        isActive={showSymptomAnalyzer}
        onAnalysisComplete={handleSymptomAnalysisComplete}
        onClose={() => setShowSymptomAnalyzer(false)}
      />
    </div>
  );
};

export default Telemedicine;
