import React, { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useNavigate } from "react-router-dom";
import { auth as authService, checkServerHealth, RegisterData, LoginData } from "@/services/unifiedAuthService";
import { 
  User, 
  Mail, 
  Phone, 
  Lock, 
  Eye, 
  EyeOff,
  ArrowLeft,
  PawPrint,
  Loader2,
  CheckCircle,
  AlertCircle
} from "lucide-react";
import { toast } from "sonner";

const Auth = () => {
  const [isLogin, setIsLogin] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [serverStatus, setServerStatus] = useState<'unknown' | 'online' | 'offline'>('unknown');
  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    password: "",
    confirmPassword: ""
  });
  const [errors, setErrors] = useState<{[key: string]: string}>({});
  const navigate = useNavigate();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const checkServerStatus = async () => {
    try {
      const isOnline = await checkServerHealth();
      setServerStatus(isOnline ? 'online' : 'offline');
    } catch (error) {
      setServerStatus('offline');
    }
  };

  // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  React.useEffect(() => {
    checkServerStatus();
  }, []);

  const validateForm = (): boolean => {
    const newErrors: {[key: string]: string} = {};

    // Email validation
    if (!formData.email) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }

    // Password validation
    if (!formData.password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (formData.password.length < 6) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    // Registration specific validations
    if (!isLogin) {
      // Password confirmation
      if (!formData.confirmPassword) {
        newErrors.confirmPassword = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å';
      } else if (formData.password !== formData.confirmPassword) {
        newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
      }

      // Name validation
      if (!formData.firstName?.trim()) {
        newErrors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    try {
      if (isLogin) {
        // –í—Ö–æ–¥
        const loginData: LoginData = {
          email: formData.email,
          password: formData.password
        };

        const result = await authService.login(loginData);
        
        console.log('Login result:', result); // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        if (result.success) {
          toast.success('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!');
          navigate('/profile');
        } else {
          console.error('Login failed:', result);
          toast.error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
          if (result.message?.includes('email')) {
            toast.info('üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º');
          }
        }
      } else {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const registerData: RegisterData = {
          email: formData.email,
          password: formData.password,
          firstName: formData.firstName,
          lastName: formData.lastName,
          phone: formData.phone
        };

        const result = await authService.register(registerData);
        
        console.log('Registration result:', result); // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        
        if (result.success) {
          toast.success('üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø–æ—á—Ç—É
          toast.custom((t) => (
            <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg border max-w-sm">
              <div className="flex items-start gap-3">
                <div className="w-8 h-8 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                  <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 dark:text-white mb-2">
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email!
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mb-3">
                    –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ –Ω–∞ <strong>{formData.email}</strong>
                  </p>
                  <button
                    onClick={() => {
                      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω –ø–æ—á—Ç—ã –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
                      const emailDomain = formData.email.split('@')[1];
                      
                      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                      const emailInstructions = {
                        'gmail.com': { 
                          url: 'https://gmail.com',
                          note: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ" –∏–ª–∏ "–°–ø–∞–º"'
                        },
                        'yandex.ru': { 
                          url: 'https://mail.yandex.ru',
                          note: '‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–†–∞—Å—Å—ã–ª–∫–∏" –≤ –Ø–Ω–¥–µ–∫—Å –ø–æ—á—Ç–µ - –ø–∏—Å—å–º–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç—É–¥–∞!'
                        },
                        'mail.ru': { 
                          url: 'https://mail.ru',
                          note: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ" –∏–ª–∏ "–°–ø–∞–º"'
                        },
                        'yahoo.com': { 
                          url: 'https://mail.yahoo.com',
                          note: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–í—Ö–æ–¥—è—â–∏–µ", –º–æ–∂–µ—Ç –ø–æ–ø–∞—Å—Ç—å –≤ "–°–ø–∞–º"'
                        },
                        'outlook.com': { 
                          url: 'https://outlook.com',
                          note: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–∞–ø–∫–∏, –≤–∫–ª—é—á–∞—è "–°–ø–∞–º"'
                        },
                        'hotmail.com': { 
                          url: 'https://hotmail.com',
                          note: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–∞–ø–∫–∏, –≤–∫–ª—é—á–∞—è "–°–ø–∞–º"'
                        }
                      };
                      
                      const instruction = emailInstructions[emailDomain as keyof typeof emailInstructions];
                      if (instruction) {
                        window.open(instruction.url, '_blank');
                        toast.dismiss(t);
                        toast.success('‚úÖ –ü–æ—á—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞!');
                        toast.info(instruction.note);
                      } else {
                        toast.info('–û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –≤—Ä—É—á–Ω—É—é');
                        toast.info('üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º" - –ø–∏—Å—å–º–∞ —á–∞—Å—Ç–æ –ø–æ–ø–∞–¥–∞—é—Ç —Ç—É–¥–∞');
                      }
                    }}
                    className="w-full bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium py-2 px-4 rounded-md transition-colors"
                  >
                    üìß –û—Ç–∫—Ä—ã—Ç—å –ø–æ—á—Ç—É
                  </button>
                  {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ */}
                  {formData.email.includes('yandex.') && (
                    <button
                      onClick={async () => {
                        try {
                          const registerData = {
                            email: formData.email,
                            password: 'temp123', // –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                            firstName: formData.firstName,
                            lastName: formData.lastName,
                            phone: formData.phone
                          };
                          
                          await authService.register(registerData);
                          toast.info('üìß –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å');
                          toast.info('‚ö†Ô∏è –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ Gmail');
                        } catch (error) {
                          toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ');
                        }
                      }}
                      className="w-full mt-2 bg-orange-500 hover:bg-orange-600 text-white text-sm font-medium py-2 px-4 rounded-md transition-colors"
                    >
                      üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –Ø–Ω–¥–µ–∫—Å
                    </button>
                  )}
                  
                  <button
                    onClick={() => toast.dismiss(t)}
                    className="w-full mt-2 text-gray-500 hover:text-gray-700 text-sm py-1 transition-colors"
                  >
                    –ó–∞–∫—Ä—ã—Ç—å
                  </button>
                </div>
              </div>
            </div>
          ), { duration: 10000 });
          
          setIsLogin(true); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
          setFormData({
            firstName: "",
            lastName: "",
            email: formData.email, // –°–æ—Ö—Ä–∞–Ω—è–µ–º email –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            phone: "",
            password: "",
            confirmPassword: ""
          });
        } else {
          console.error('Registration failed:', result);
          toast.error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
        }
      }
    } catch (error: any) {
      console.error('Auth error:', error);
      toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

    const handleInputChange = (field: string, value: string) => {
      setFormData(prev => ({
        ...prev,
        [field]: value
      }));
      
      // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      if (errors[field]) {
        setErrors(prev => ({
          ...prev,
          [field]: ''
        }));
      }
    };

  return (
    <div className="bg-background min-h-screen pt-16 ios-scroll-fix">
      {/* Header */}
      <div className="px-4 mt-6">
        <div className="flex items-center gap-3 mb-6">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => navigate(-1)}
            className="w-10 h-10 p-0"
          >
            <ArrowLeft className="w-4 h-4" />
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-foreground">
              {isLogin ? '–í—Ö–æ–¥' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}
            </h1>
            <p className="text-sm text-muted-foreground">
              {isLogin ? '–í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' : '–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞'}
            </p>
          </div>
        </div>
      </div>

      {/* Auth Form */}
      <section className="px-4">
        <Card className="p-6">
          {/* Logo */}
          <div className="text-center mb-6">
            <div className="w-20 h-20 mx-auto mb-3 flex items-center justify-center">
              <img 
                src="/new-logo.png" 
                alt="–õ–æ–≥–æ—Ç–∏–ø –∫–ª–∏–Ω–∏–∫–∏ –ú–æ—Ä–µ" 
                className="w-full h-full object-contain"
              />
            </div>
            <h2 className="text-xl font-semibold text-foreground">
              –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä ¬´–ú–æ—Ä–µ¬ª
            </h2>
          </div>

          {/* Server Status Indicator */}
          <div className="mb-4 p-3 rounded-lg text-sm flex items-center gap-2">
            {serverStatus === 'online' ? (
              <>
                <CheckCircle className="w-4 h-4 text-green-500" />
                <span className="text-green-700">–°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞</span>
              </>
            ) : serverStatus === 'offline' ? (
              <>
                <AlertCircle className="w-4 h-4 text-red-500" />
                <span className="text-red-700">–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –¥–µ–º–æ —Ä–µ–∂–∏–º</span>
              </>
            ) : (
              <>
                <Loader2 className="w-4 h-4 animate-spin text-blue-500" />
                <span className="text-blue-700">–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>
              </>
            )}
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            {/* Name fields (only for registration) */}
            {!isLogin && (
              <>
                <div>
                  <Label htmlFor="firstName" className="text-foreground text-sm mb-2 block">
                    –ò–º—è
                  </Label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                    <Input
                      id="firstName"
                      type="text"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      value={formData.firstName}
                      onChange={(e) => handleInputChange('firstName', e.target.value)}
                      className={`pl-10 h-12 ${errors.firstName ? 'border-red-500 focus:border-red-500' : ''}`}
                      required={!isLogin}
                    />
                  </div>
                  {errors.firstName && (
                    <p className="text-red-500 text-xs mt-1 flex items-center gap-1">
                      <AlertCircle className="w-3 h-3" />
                      {errors.firstName}
                    </p>
                  )}
                </div>

                <div>
                  <Label htmlFor="lastName" className="text-foreground text-sm mb-2 block">
                    –§–∞–º–∏–ª–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </Label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                    <Input
                      id="lastName"
                      type="text"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é"
                      value={formData.lastName}
                      onChange={(e) => handleInputChange('lastName', e.target.value)}
                      className="pl-10 h-12"
                    />
                  </div>
                </div>
              </>
            )}

            {/* Email field */}
            <div>
              <Label htmlFor="email" className="text-foreground text-sm mb-2 block">
                Email
              </Label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                <Input
                  id="email"
                  type="email"
                  placeholder="example@mail.com"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className={`pl-10 h-12 ${errors.email ? 'border-red-500 focus:border-red-500' : ''}`}
                  required
                />
              </div>
              {errors.email && (
                <p className="text-red-500 text-xs mt-1 flex items-center gap-1">
                  <AlertCircle className="w-3 h-3" />
                  {errors.email}
                </p>
              )}
            </div>

            {/* Phone field (only for registration) */}
            {!isLogin && (
              <div>
                <Label htmlFor="phone" className="text-foreground text-sm mb-2 block">
                  –¢–µ–ª–µ—Ñ–æ–Ω
                </Label>
                <div className="relative">
                  <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                  <Input
                    id="phone"
                    type="tel"
                    placeholder="+7 (999) 123-45-67"
                    value={formData.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    className="pl-10 h-12"
                    required={!isLogin}
                  />
                </div>
              </div>
            )}

            {/* Password field */}
            <div>
              <Label htmlFor="password" className="text-foreground text-sm mb-2 block">
                –ü–∞—Ä–æ–ª—å
              </Label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  className={`pl-10 pr-10 h-12 ${errors.password ? 'border-red-500 focus:border-red-500' : ''}`}
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground hover:text-foreground"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
              {errors.password && (
                <p className="text-red-500 text-xs mt-1 flex items-center gap-1">
                  <AlertCircle className="w-3 h-3" />
                  {errors.password}
                </p>
              )}
              {!isLogin && (
                <div className="text-xs text-muted-foreground mt-1">
                  <p>–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</p>
                  <p className="text-blue-600 font-medium mt-1">
                    üí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ø–Ω–¥–µ–∫—Å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–†–∞—Å—Å—ã–ª–∫–∏"
                  </p>
                </div>
              )}
            </div>

            {/* Confirm Password field (only for registration) */}
            {!isLogin && (
              <div>
                <Label htmlFor="confirmPassword" className="text-foreground text-sm mb-2 block">
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å
                </Label>
                <div className="relative">
                  <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                  <Input
                    id="confirmPassword"
                    type="password"
                    placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    value={formData.confirmPassword}
                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                    className={`pl-10 h-12 ${errors.confirmPassword ? 'border-red-500 focus:border-red-500' : ''}`}
                    required={!isLogin}
                  />
                </div>
                {errors.confirmPassword && (
                  <p className="text-red-500 text-xs mt-1 flex items-center gap-1">
                    <AlertCircle className="w-3 h-3" />
                    {errors.confirmPassword}
                  </p>
                )}
              </div>
            )}

            {/* Submit Button */}
            <Button 
              type="submit" 
              disabled={isLoading || serverStatus === 'offline'}
              className="w-full h-12 text-base font-medium mt-6"
            >
              {isLoading ? (
                <>
                  <Loader2 className="w-4 h-4 animate-spin mr-2" />
                  {isLogin ? '–í—Ö–æ–¥...' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...'}
                </>
              ) : (
                isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
              )}
            </Button>
          </form>

          {/* Toggle Login/Register */}
          <div className="text-center mt-6">
            <p className="text-sm text-muted-foreground">
              {isLogin ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?'}
              <button
                onClick={() => setIsLogin(!isLogin)}
                className="ml-2 text-primary font-medium hover:underline"
              >
                {isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'}
              </button>
            </p>
          </div>

          {/* Forgot Password (only for login) */}
          {isLogin && (
            <div className="text-center mt-4">
              <button className="text-sm text-primary hover:underline">
                –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
              </button>
            </div>
          )}
        </Card>
      </section>

      {/* Benefits */}
      <section className="px-4 mt-6 mb-6">
        <Card className="p-4 bg-primary/5 border-primary/20">
          <h3 className="font-semibold text-foreground mb-3">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:</h3>
          <div className="space-y-2 text-sm text-muted-foreground">
            <div className="flex items-center gap-2">
              <div className="w-1.5 h-1.5 bg-primary rounded-full"></div>
              <span>–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –≤–∏–∑–∏—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-1.5 h-1.5 bg-primary rounded-full"></div>
              <span>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤–∏–≤–∫–∞—Ö –∏ –æ—Å–º–æ—Ç—Ä–∞—Ö</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-1.5 h-1.5 bg-primary rounded-full"></div>
              <span>–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á–∞–º</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-1.5 h-1.5 bg-primary rounded-full"></div>
              <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
            </div>
          </div>
        </Card>
      </section>
    </div>
  );
};

export default Auth;
