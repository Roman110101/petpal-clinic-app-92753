import { authService } from './authService';
import { supabaseAuthService } from './supabaseAuthService';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Supabase
const useSupabase = !!import.meta.env.VITE_SUPABASE_URL && !!import.meta.env.VITE_SUPABASE_ANON_KEY;

console.log('üîß Auth Service:', useSupabase ? 'Supabase' : 'Local Server');

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const auth = useSupabase ? supabaseAuthService : authService;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const checkServerHealth = async (): Promise<boolean> => {
  if (useSupabase) {
    try {
      // –î–ª—è Supabase –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/rest/v1/`, {
        headers: {
          'apikey': import.meta.env.VITE_SUPABASE_ANON_KEY
        }
      });
      return response.ok;
    } catch {
      return false;
    }
  } else {
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    return authService.checkServerHealth();
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã
export type { User, LoginData, RegisterData } from './authService';

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã Supabase –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
export const onAuthStateChange = useSupabase ? supabaseAuthService.onAuthStateChange.bind(supabaseAuthService) : undefined;
