import React, { useState, useRef, useEffect } from 'react';
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Mic, 
  MicOff, 
  Volume2, 
  VolumeX,
  Bot,
  User,
  Send,
  MessageCircle,
  Loader2,
  X
} from 'lucide-react';
import { toast } from "sonner";
import { aiAssistant } from '@/lib/ai-assistant';
import { voiceAPI, VoiceAPIClient } from '@/lib/voice-api';

interface VoiceMessage {
  id: string;
  text: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
  isAudio?: boolean;
}

interface VoiceAssistantProps {
  isOpen: boolean;
  onClose: () => void;
}

const VoiceAssistant: React.FC<VoiceAssistantProps> = ({ isOpen, onClose }) => {
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [messages, setMessages] = useState<VoiceMessage[]>([
    {
      id: '1',
      text: '–ü—Ä–∏–≤–µ—Ç! üòä –Ø –î–∞—Ä—å—è, –≤–∞—à–∞ –ø–æ–º–æ—â–Ω–∏—Ü–∞! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      sender: 'assistant',
      timestamp: new Date()
    }
  ]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [apiConnected, setApiConnected] = useState(false);
  const [useCloudAPI, setUseCloudAPI] = useState(false);
  
  const recognitionRef = useRef<SpeechRecognition | null>(null);
  const synthesisRef = useRef<SpeechSynthesisUtterance | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
  useEffect(() => {
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'ru-RU';

      recognitionRef.current.onstart = () => {
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–∞—á–∞–ª–æ—Å—å');
        setIsListening(true);
      };

      recognitionRef.current.onresult = async (event) => {
        const transcript = event.results[0][0].transcript;
        console.log('üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç:', transcript);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userMessage: VoiceMessage = {
          id: Date.now().toString(),
          text: transcript,
          sender: 'user',
          timestamp: new Date(),
          isAudio: true
        };
        
        setMessages(prev => [...prev, userMessage]);
        setIsProcessing(true);
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å ElevenLabs
          await sendTextMessage(transcript);
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ AI:', error);
          toast.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
        } finally {
          setIsProcessing(false);
        }
      };

      recognitionRef.current.onerror = (event) => {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', event.error);
        setIsListening(false);
        toast.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏');
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    } else {
      console.warn('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —Ä–µ—á–∏
  const startListening = () => {
    if (recognitionRef.current && !isListening) {
      recognitionRef.current.start();
      toast.success('üé§ –°–ª—É—à–∞—é...', { duration: 1000 });
    }
  };

  const stopListening = () => {
    if (recognitionRef.current && isListening) {
      recognitionRef.current.stop();
      toast.info('üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', { duration: 1000 });
    }
  };

  const stopSpeaking = () => {
    if (synthesisRef.current) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
      toast.info('üîá –ì–æ–ª–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', { duration: 1000 });
    }
  };

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (isOpen) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ElevenLabs API
      checkAPIConnection();
    }
  }, [isOpen]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    if (isOpen && messages.length === 1) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤
      setTimeout(() => {
        speakText(messages[0].text);
      }, 1000);
    }
  }, [isOpen]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
  const checkAPIConnection = async () => {
    try {
      const connected = await voiceAPI.checkHealth();
      setApiConnected(connected);
      setUseCloudAPI(connected);
      
      if (connected) {
        toast.success('üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ElevenLabs API!', { duration: 2000 });
      } else {
        toast.warning('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º', { duration: 2000 });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error);
      setApiConnected(false);
      setUseCloudAPI(false);
      toast.warning('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º', { duration: 2000 });
    }
  };


  // –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
  const speakText = async (text: string) => {
    console.log('üé§ –ü–æ–ø—ã—Ç–∫–∞ –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç:', text);
    
    if (useCloudAPI && apiConnected) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs Text-to-Speech
      try {
        console.log('üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs TTS');
        setIsSpeaking(true);
        toast.success('üîä –î–∞—Ä—å—è –≥–æ–≤–æ—Ä–∏—Ç...', { duration: 1000 });
        
        const response = await voiceAPI.synthesizeSpeech(text);
        
        if (response.success && response.audio) {
          await VoiceAPIClient.playAudio(response.audio);
          console.log('‚úÖ ElevenLabs TTS –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –æ—Ç API');
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ ElevenLabs TTS:', error);
        toast.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ ElevenLabs');
        setIsSpeaking(false);
        return; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –≥–æ–ª–æ—Å
      } finally {
        setIsSpeaking(false);
      }
    } else {
      // –ï—Å–ª–∏ API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
      console.log('‚ùå ElevenLabs API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      toast.error('–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.');
    }
  };

  // –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (fallback)
  const fallbackSpeechSynthesis = (text: string) => {
    console.log('üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏');
    
    if (!('speechSynthesis' in window)) {
      console.error('‚ùå SpeechSynthesis –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      toast.error('–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
    window.speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'ru-RU';
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
    const getVoices = () => {
      return new Promise<SpeechSynthesisVoice[]>((resolve) => {
        let voices = window.speechSynthesis.getVoices();
        if (voices.length > 0) {
          resolve(voices);
        } else {
          // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤
          window.speechSynthesis.addEventListener('voiceschanged', () => {
            voices = window.speechSynthesis.getVoices();
            resolve(voices);
          }, { once: true });
        }
      });
    };

    getVoices().then((voices) => {
      console.log('üéµ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:', voices.map(v => `${v.name} (${v.lang})`));
      
      // –ò—â–µ–º –ª—É—á—à–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
      const allVoices = voices.filter(voice => 
        voice.lang.startsWith('ru') || 
        voice.lang.startsWith('en') ||
        voice.name.includes('Russian') || 
        voice.name.includes('Google') ||
        voice.name.includes('Microsoft') ||
        voice.name.includes('Samantha') ||
        voice.name.includes('Karen') ||
        voice.name.includes('Victoria') ||
        voice.name.includes('Kate') ||
        voice.name.includes('Zira') ||
        voice.name.includes('Female') ||
        voice.name.includes('Woman') ||
        voice.name.includes('Girl') ||
        voice.name.includes('Luna') ||
        voice.name.includes('Nova') ||
        voice.name.includes('Serena') ||
        voice.name.includes('Aria') ||
        voice.name.includes('Ivy') ||
        voice.name.includes('Ruby') ||
        voice.name.includes('Amber') ||
        voice.name.includes('Coral')
      );

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä—É—Å—Å–∫–∏–º –≥–æ–ª–æ—Å–∞–º
      const russianVoices = allVoices.filter(voice => voice.lang.startsWith('ru'));
      
      console.log('üá∑üá∫ –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞:', russianVoices.map(v => v.name));
      
      // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
      let selectedVoice = null;
      
      if (russianVoices.length > 0) {
        // –ò—â–µ–º –ª—É—á—à–∏–π —Ä—É—Å—Å–∫–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
        selectedVoice = russianVoices.find(voice => 
          voice.name.toLowerCase().includes('female') ||
          voice.name.toLowerCase().includes('–∂–µ–Ω—Å–∫–∏–π') ||
          voice.name.toLowerCase().includes('woman') ||
          voice.name.toLowerCase().includes('girl') ||
          voice.name.includes('Google') ||
          voice.name.includes('Samantha') ||
          voice.name.includes('Karen') ||
          voice.name.includes('Victoria') ||
          voice.name.includes('Kate') ||
          voice.name.includes('Zira') ||
          voice.name.includes('Luna') ||
          voice.name.includes('Nova') ||
          voice.name.includes('Serena') ||
          voice.name.includes('Aria') ||
          voice.name.includes('Ivy') ||
          voice.name.includes('Ruby') ||
          voice.name.includes('Amber') ||
          voice.name.includes('Coral')
        ) || russianVoices[0];
        
        console.log('üé§ –í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å:', selectedVoice?.name);
      } else if (allVoices.length > 0) {
        // –ò—â–µ–º –ª—É—á—à–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        selectedVoice = allVoices.find(voice => 
          voice.name.toLowerCase().includes('female') ||
          voice.name.toLowerCase().includes('woman') ||
          voice.name.toLowerCase().includes('girl') ||
          voice.name.includes('Samantha') ||
          voice.name.includes('Karen') ||
          voice.name.includes('Victoria') ||
          voice.name.includes('Kate') ||
          voice.name.includes('Zira') ||
          voice.name.includes('Luna') ||
          voice.name.includes('Nova') ||
          voice.name.includes('Serena') ||
          voice.name.includes('Aria') ||
          voice.name.includes('Ivy') ||
          voice.name.includes('Ruby') ||
          voice.name.includes('Amber') ||
          voice.name.includes('Coral') ||
          voice.name.includes('Google') ||
          voice.name.includes('Microsoft')
        ) || allVoices[0];
        
        console.log('üé§ –í—ã–±—Ä–∞–Ω –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å:', selectedVoice?.name);
      } else {
        console.log('‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π');
      }
      
      if (selectedVoice) {
        utterance.voice = selectedVoice;
        utterance.lang = selectedVoice.lang;
      }
      
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∞–º–æ–≥–æ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∂–µ–Ω—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
      utterance.rate = 0.75;        // –ï—â–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
      utterance.pitch = 1.2;        // –í—ã—à–µ –¥–ª—è –±–æ–ª–µ–µ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
      utterance.volume = 0.85;      // –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
      utterance.lang = selectedVoice?.lang || 'ru-RU';
      
      utterance.onstart = () => {
        console.log('üîä –ù–∞—á–∞–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è');
        setIsSpeaking(true);
        toast.success('üîä –î–∞—Ä—å—è –≥–æ–≤–æ—Ä–∏—Ç...', { duration: 1000 });
      };
      
      utterance.onend = () => {
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        setIsSpeaking(false);
      };
      
      utterance.onerror = (event) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:', event);
        setIsSpeaking(false);
        toast.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞');
      };
      
      synthesisRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    }).catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤:', error);
      // Fallback - –≥–æ–≤–æ—Ä–∏–º –±–µ–∑ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
      utterance.rate = 0.9;
      utterance.pitch = 1.05;
      utterance.volume = 1.0;
      window.speechSynthesis.speak(utterance);
    });
  };




  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendTextMessage = async (text: string) => {
    if (!text.trim()) return;
    
    const userMessage: VoiceMessage = {
      id: Date.now().toString(),
      text: text.trim(),
      sender: 'user',
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setIsProcessing(true);
    
    try {
      let responseText: string;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (useCloudAPI && apiConnected) {
        try {
          console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs AI');
          const response = await voiceAPI.processTextMessage(text);
          
          if (response.success) {
            responseText = response.response.text;
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Google Cloud AI');
          } else {
            throw new Error('Google API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ Google Cloud AI:', error);
          // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π AI
          responseText = aiAssistant.getResponse(text);
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π AI
        console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π AI (—É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)');
        responseText = aiAssistant.getResponse(text);
      }
      
      const assistantMessage: VoiceMessage = {
        id: (Date.now() + 1).toString(),
        text: responseText,
        sender: 'assistant',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ–≤–æ—Ä–∏–º –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
      await speakText(responseText);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
      
      // Fallback –æ—Ç–≤–µ—Ç
      const fallbackMessage: VoiceMessage = {
        id: (Date.now() + 1).toString(),
        text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        sender: 'assistant',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, fallbackMessage]);
    } finally {
      setIsProcessing(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-[99999] p-4">
      <Card className="w-full max-w-md h-[600px] flex flex-col shadow-2xl border-teal-200 bg-gradient-to-b from-teal-50 to-white">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b bg-gradient-to-r from-teal-500 to-cyan-500 text-white rounded-t-lg">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-white/20 rounded-full">
              <Bot className="w-5 h-5" />
            </div>
            <div>
              <h3 className="font-semibold">–î–∞—Ä—å—è</h3>
              <p className="text-xs text-teal-100">AI –ü–æ–º–æ—â–Ω–∏—Ü–∞</p>
            </div>
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
            className="h-8 w-8 p-0 text-white hover:bg-white/20"
          >
            <X className="w-4 h-4" />
          </Button>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        <div className="flex-1 overflow-y-auto p-4 space-y-3">
          {messages.map((message) => (
            <div key={message.id} className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-[80%] ${message.sender === 'user' ? 'order-2' : 'order-1'}`}>
                <div className={`px-3 py-2 rounded-lg text-sm ${
                  message.sender === 'user' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100'
                }`}>
                  {message.text}
                </div>
                <div className={`flex items-center gap-1 mt-1 text-xs text-gray-500 ${
                  message.sender === 'user' ? 'justify-end' : 'justify-start'
                }`}>
                  {message.isAudio && (
                    <Badge variant="secondary" className="text-xs">
                      {message.sender === 'user' ? 'üé§' : 'üîä'}
                    </Badge>
                  )}
                  <span>{message.timestamp.toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}</span>
                </div>
              </div>
            </div>
          ))}
          
          {isProcessing && (
            <div className="flex justify-start">
              <div className="bg-gray-100 dark:bg-gray-800 px-3 py-2 rounded-lg text-sm">
                <div className="flex items-center gap-2">
                  <Loader2 className="w-4 h-4 animate-spin" />
                  <span>–î—É–º–∞—é...</span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="p-4 border-t space-y-3">
          {/* –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ */}
          <div className="flex items-center justify-center gap-4">
            <Button
              variant={isListening ? "destructive" : "default"}
              size="lg"
              onClick={isListening ? stopListening : startListening}
              disabled={isProcessing}
              className="rounded-full w-16 h-16 shadow-lg bg-teal-500 hover:bg-teal-600 text-white"
            >
              {isListening ? (
                <MicOff className="w-6 h-6" />
              ) : (
                <Mic className="w-6 h-6" />
              )}
            </Button>
            
            {isSpeaking && (
              <Button
                variant="outline"
                size="sm"
                onClick={stopSpeaking}
                className="rounded-full border-teal-300 text-teal-600 hover:bg-teal-50"
              >
                <VolumeX className="w-4 h-4 mr-2" />
                –°—Ç–æ–ø
              </Button>
            )}
          </div>

          {/* –°—Ç–∞—Ç—É—Å */}
          <div className="text-center space-y-1">
            {/* API Status */}
            <div className="flex justify-center gap-2 flex-wrap">
              <Badge 
                variant="secondary" 
                className="bg-teal-100 text-teal-800"
              >
                {useCloudAPI && apiConnected ? "üé§ ElevenLabs" : "üé§ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å"}
              </Badge>
              
              <Badge 
                variant="secondary" 
                className="bg-blue-100 text-blue-800"
              >
                {useCloudAPI && apiConnected ? "üß† ElevenLabs AI" : "üß† –£–º–Ω—ã–π AI"}
              </Badge>
            </div>
            
            {/* Activity Status */}
            <div>
              {isListening && (
                <Badge variant="secondary" className="bg-red-100 text-red-800 animate-pulse">
                  üé§ –°–ª—É—à–∞—é...
                </Badge>
              )}
              {isProcessing && (
                <Badge variant="secondary" className="bg-yellow-100 text-yellow-800 animate-pulse">
                  ü§î –î–∞—Ä—å—è –¥—É–º–∞–µ—Ç...
                </Badge>
              )}
              {isSpeaking && (
                <Badge variant="secondary" className="bg-teal-100 text-teal-800 animate-pulse">
                  üîä –î–∞—Ä—å—è –≥–æ–≤–æ—Ä–∏—Ç...
                </Badge>
              )}
            </div>
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="grid grid-cols-2 gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => sendTextMessage('–£ –º–æ–µ–≥–æ –∫–æ—Ç–∞ –ø—Ä–æ–ø–∞–ª –∞–ø–ø–µ—Ç–∏—Ç')}
              disabled={isProcessing}
              className="text-xs"
            >
              <MessageCircle className="w-3 h-3 mr-1" />
              –°–∏–º–ø—Ç–æ–º—ã
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => sendTextMessage('–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º?')}
              disabled={isProcessing}
              className="text-xs"
            >
              <MessageCircle className="w-3 h-3 mr-1" />
              –ó–∞–ø–∏—Å—å
            </Button>
          </div>

          {/* –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ */}
          <div className="flex items-center gap-2 pt-2">
            <input
              type="text"
              placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω..."
              className="flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-transparent"
              onKeyPress={(e) => {
                if (e.key === 'Enter') {
                  const input = e.target as HTMLInputElement;
                  if (input.value.trim()) {
                    sendTextMessage(input.value);
                    input.value = '';
                  }
                }
              }}
              disabled={isProcessing}
            />
            <Button
              size="sm"
              onClick={() => {
                const input = document.querySelector('input[type="text"]') as HTMLInputElement;
                if (input && input.value.trim()) {
                  sendTextMessage(input.value);
                  input.value = '';
                }
              }}
              disabled={isProcessing}
              className="bg-teal-500 hover:bg-teal-600 text-white"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default VoiceAssistant;
